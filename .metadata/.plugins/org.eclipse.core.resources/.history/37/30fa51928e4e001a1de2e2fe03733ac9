package com.capgemini.storemanagement.controller;

import java.util.Scanner;

import org.apache.log4j.Logger;

import com.capgemini.storemanagement.dto.ProductInformation;
import com.capgemini.storemanagement.dto.UserInformation;
import com.capgemini.storemanagement.exception.IdInvalidException;
import com.capgemini.storemanagement.exception.InvalidChoiceException;
import com.capgemini.storemanagement.service.impl.AdminServiceImpl;
import com.capgemini.storemanagement.service.impl.ManufacturerServiceImpl;
import com.capgemini.storemanagement.validation.ValidateCheck;
import com.capgemini.storemanagement.validation.Validations;

public class ManufacturerController {
	Scanner scan = new Scanner(System.in);
	AdminServiceImpl service = new AdminServiceImpl();
	UserInformation dinfo = new UserInformation();
	ProductInformation product = new ProductInformation();
	ManufacturerServiceImpl manufacturer = new ManufacturerServiceImpl();
	Validations valid = new Validations();

	int choice = 0;

	Logger log = Logger.getLogger("store");

	void manufacturerTask() {

		int choice = 0;

		log.info("\n");
		log.info("\t\tWelcome to Manufacturer's page");
		log.info("\t\t1.Add Dealer Information");
		log.info("\t\t2.Update Dealer Information");
		log.info("\t\t3.Delete Dealer Information");
		log.info("\t\t4.Show Dealer Information");
		log.info("\t\t5.Add Product Detail");
		log.info("\t\t6.Remove Product Detail");
		log.info("\t\t7.Update Product Detail");
		log.info("\t\t8.Show the Product Detail");
		log.info("\t\t9.Exit");

		do {

			log.info("\t\t------------------------");
			log.info("\t\tEnter Your Choice");
			log.info("\t\t------------------------");
			choice = scan.nextInt();

			switch (choice) {
			case 1:

				log.info("Enter the DealerId");
				scan = valid.integerValidation();
				int dealerId = scan.nextInt();
				dinfo.setUserId(dealerId);

				while (true) {
					log.info("Enter the Dealer Name");
					String dealerName = scan.next();
					if (valid.userNameValidation(dealerName)) {
						dinfo.setUserName(dealerName);
						break;
					} else
						log.info("Invalid");
				}

				while (true) {
					log.info("Enter the Password");
					String password = scan.next();
					if (ValidateCheck.validPassword(password)) {
						String pwd = service.generatePassword(password);
						dinfo.setPassword(pwd);
						break;
					} else
						log.info("Invalid Password");
				}

				while (true) {
					log.info("Enter the PhoneNumber");
					String Phn_no = scan.next();
					if (ValidateCheck.validContact(Phn_no)) {
						dinfo.setPhn_no(Phn_no);
						break;
					} else
						log.info("Invalid Phone Number");
				}

				log.info("Enter the Address");
				String address = scan.next();
				dinfo.setAddress(address);

				while (true) {
					log.info("Enter the Email_Id");
					String emailId = scan.next();
					if (ValidateCheck.emailValidation(emailId)) {
						dinfo.setEmail_id(emailId);
						break;
					} else
						log.info("Invalid Phone Number");
				}

				manufacturer.addDealerDetail(dinfo);
				log.info("\n");
				log.info("Insert Succesfully");
				break;

			case 2:

				// UserInformation user1 = new UserInformation();
				log.info("Enter the Dealer_ID You want to Update");
				int id = scan.nextInt();

				while (true) {
					log.info("Enter the Dealer Name");
					String dealername = scan.next();
					if (valid.userNameValidation(dealername)) {
						dinfo.setUserName(dealername);
						break;
					} else {
						log.info("Name is not in proper Format");
					}
				}

				while (true) {
					log.info("Enter the Password");
					String pwd = scan.next();
					if (ValidateCheck.validPassword(pwd)) {
						String password = service.generatePassword(pwd);
						dinfo.setPassword(password);
						break;
					} else
						log.info("Password is not valid");
				}

				while (true) {
					log.info("Enter the PhoneNumber");
					String phn_no = scan.next();
					if (ValidateCheck.validContact(phn_no)) {
						dinfo.setPhn_no(phn_no);
						break;
					} else {
						log.info("Phone Number is not valid");
					}
				}

				log.info("Enter the Address");
				String address_info = scan.next();
				dinfo.setAddress(address_info);

				while (true) {
					log.info("Enter the Email_Id");
					String email_Id = scan.next();
					if (ValidateCheck.emailValidation(email_Id)) {
						dinfo.setEmail_id(email_Id);
						break;
					} else {
						log.info("Email Id is Not Valid");
					}
				}
				boolean flag = manufacturer.updateDealerDetail(id, dinfo);
				if (flag) {
					log.info("\n");
					log.info("Record has been updated Successfully!!!");
				} else {
					try {
						throw new IdInvalidException();
					} catch (IdInvalidException e) {
						log.info(e.getMessage());
						manufacturerTask();
					}
				}
				break;

			case 3:
				log.info("Enter the Dealer_Id You want to Delete");
				int dealerid = scan.nextInt();
				boolean checkDeleted = manufacturer.removeDealerDetail(dealerid);
				if (checkDeleted) {
					log.info("Dealer's information is deleted Succesfully");
				} else {
					try {
						throw new IdInvalidException();
					} catch (IdInvalidException e) {
						log.info(e.getMessage());
						manufacturerTask();
					}
				}
				break;

			case 4:
				log.info("\t\t--------------Dealer's Info----------------");
				String ResultSet = manufacturer.showDealerDetail();
				log.info(ResultSet);
				break;

			case 5:

				log.trace("*********Enter Product Detail************");

				log.info("Enter the ProductId");
				scan = valid.integerValidation();
				int productId = scan.nextInt();
				product.setProductId(productId);

				log.info("Enter the Product Name");
				String productName = scan.next();
				product.setProductName(productName);

				log.info("Enter the ProductBrand");
				String productBrand = scan.next();
				product.setProductBrand(productBrand);

				log.info("Enter the Quantity");
				int quantity = scan.nextInt();
				product.setQuantity(quantity);

				log.info("Enter the Cost Price");
				int cp = scan.nextInt();
				product.setCostPrice(cp);

				int sp = 0;
				product.setSellingPrice(sp);

				manufacturer.addProductDetail(product);
				log.info("\n");
				log.info("Insert Succesfully");
				break;

			case 6:
				log.info("Enter the Product_Id You want to Delete");
				int productid = scan.nextInt();
				boolean check = manufacturer.removeProductDetai(productid);
				if (check) {
					log.info("Product's information is deleted Succesfully");
				} else {
					try {
						throw new IdInvalidException();
					} catch (IdInvalidException e) {
						log.info(e.getMessage());
						manufacturerTask();
					}
				}
				break;

			case 7:
				log.info("Enter the Product_Id You want to Update");
				int pid = scan.nextInt();

				log.info("Enter the Product Name");
				String productname = scan.next();
				product.setProductName(productname);

				log.info("Enter the Product Brand");
				String productbrand = scan.next();
				product.setProductBrand(productbrand);

				log.info("Enter the Quantity");
				int quantityproduct = scan.nextInt();
				product.setQuantity(quantityproduct);

				log.info("Enter the Cost Price");
				int cost_price = scan.nextInt();
				product.setCostPrice(cost_price);

				boolean flag1 = manufacturer.updateProductDetai(pid, product);
				if (flag1) {
					log.info("\n");
					log.info("Record has been updated Successfully!!!");
				} else {
					try {
						throw new IdInvalidException();
					} catch (IdInvalidException e) {
						log.info(e.getMessage());
						manufacturerTask();
					}
				}
				break;
			case 8:
				log.info("\t\t--------------Product's Info----------------");
				String productResult = manufacturer.showProductDetai();
				log.info(productResult);
				break;

			default:
				try {
					if (choice > 9)
						throw new InvalidChoiceException("Invalid choice");
				} catch (InvalidChoiceException e) {
					log.info(e.getMessage());
					manufacturerTask();
				}

			}
		} while (choice != 9);
	}
}
